// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`--help 1`] = `
"You are using [92melm-review <version>[39m.

    [96melm-review <zero-or-more-files-or-directories>[39m
        Analyzes your project, and lists the locations where patterns forbidden
        by your configuration appear. It can potentially also fix some of the
        errors for you when adding [94m--fix[39m.

        Unless files or directories are specified, [92melm-review[39m will look at:
        - For packages: src/ and tests/
        - For applications: the projectâ€™s elm.jsonâ€™s \\"source-directories\\" and
          tests/

    [93melm-review init[39m
        Creates an empty review configuration. It creates a [93mreview/elm.json[39m and
        a [36mreview/src/ReviewConfig.elm[39m file, and provides links to help you get
        started. Learn more by running [94melm-review init --help[39m.

    [93melm-review suppress[39m
        Generate suppression files for rules that report many errors. Use this
        when you wish to enable a rule without requiring fixing all the issues
        beforehand. Learn more by running [38;2;255;165;0melm-review suppress --help[39m.

    [93melm-review new-package[39m
        Creates an new project aimed to contain rules and to be published later.

    [93melm-review new-rule [RULE-NAME][39m
        Adds a new rule to your review configuration or review package.

You can customize the review command with the following flags:

    [36m--unsuppress[39m
        Include [38;2;255;165;0msuppressed[39m errors in the error report for all rules.

    [36m--rules <rule1,rule2,...>[39m
        Run with a subsection of the rules in the configuration.
        Specify them by their name, and separate them by commas.

    [36m--watch[39m
        Re-run [92melm-review[39m automatically when your project or configuration
        changes. Use [36m--watch-code[39m to re-run only on project changes.
        You can use [36m--watch[39m and [94m--fix[39m together.

    [36m--elmjson <path-to-elm.json>[39m
        Specify the path to the elm.json file of the project. By default,
        the one in the current directory or its parent directories will be used.

    [36m--config <path-to-review-directory>[39m
        Use the review configuration in the specified directory instead of the
        one found in the current directory or one of its parents.

    [36m--template <author>/<repo>[/path-to-the-config-folder][#branch-or-commit][39m
        Use the review configuration from a GitHub repository. You can use this
        to try out [92melm-review[39m, a configuration or a single rule.
        This flag requires Internet access, even after the first run.
        Examples:
          - elm-review --template author/elm-review-configuration
          - elm-review --template jfmengels/elm-review-unused/example#master

        I recommend to only use this temporarily, and run [93melm-review init[39m with
        this same flag to copy the configuration to your project.

    [36m--compiler <path-to-elm>[39m
        Specify the path to the [95melm[39m compiler.

    [36m--version[39m
        Print the version of the [92melm-review[39m CLI.

    [36m--debug[39m
        Add helpful information to debug your configuration or rules.
        - Print the list of reviewed files.
        - Run the compiler in debug mode, allowing you to use [33mDebug[39m statements
          in your configuration and custom rules.

    [36m--report=<json or ndjson>[39m
        Error reports will be in JSON format. [35mjson[39m prints a single JSON object
        while [35mndjson[39m will print one JSON object per error each on a new line.
        The formats are described in this document: https://bit.ly/31F6jzz

    [36m--no-details[39m
        Hide the details from error reports for a more compact view.

    [36m--ignore-dirs <dir1,dir2,...>[39m
        Ignore the reports of all rules for the specified directories.

    [36m--ignore-files <file1,file2,...>[39m
        Ignore the reports of all rules for the specified files.

If you wish to use [94mautomatic fixing[39m, you can use the following flags:

    [94m--fix[39m
        [92melm-review[39m will present fixes for the errors that offer an automatic
        fix, which you can then accept or refuse one by one. When there are no
        more fixable errors left, [92melm-review[39m will report the remaining errors as
        if it was called without [94m--fix[39m.
        Fixed files will be reformatted using [95melm-format[39m.

    [94m--fix-all[39m
        [92melm-review[39m will present a single fix containing the application of all
        available automatic fixes, which you can then accept or refuse.
        Afterwards, [92melm-review[39m will report the remaining errors as if it was
        called without [94m--fix-all[39m.
        Fixed files will be reformatted using [95melm-format[39m.

    [36m--elm-format-path <path-to-elm-format>[39m
        Specify the path to [95melm-format[39m.

"
`;

exports[`init --help 1`] = `
"The init command helps getting started with [92melm-review[39mâ€™s configuration.

    [96melm-review init[39m
        It will ask permission to create several files:
        - [93mreview/elm.json[39m in which you may add dependencies with review rules.
        - [95mreview/src/ReviewConfig.elm[39m to define your configuration.

        After the files have been created, it will provide links to get you
        started.

You can customize the init command with the following flags:

    [36m--config <path-to-review-directory>[39m
        Create the configuration files in the specified directory instead of in
        the review/ directory.

    [36m--template <author>/<repo>[/path-to-the-config-folder][#branch-or-commit][39m
        Copy the review configuration from a GitHub repository, at the root or
        in a folder. Examples:
        - elm-review init --template author/elm-review-configuration
        - elm-review init --template jfmengels/elm-review-unused/example#master

    [36m--compiler <path-to-elm>[39m
        Specify the path to the [95melm[39m compiler.
        The [95melm[39m compiler is used to know the version of the compiler to write
        down in the [93mreview/elm.json[39m fileâ€™s \`elm-version\` field. Use this if you
        have multiple versions of the [95melm[39m compiler on your device.

"
`;

exports[`new-package --help 1`] = `
"The new-package command scaffolds a new project to help you publish a package with [92melm-review[39m rules.

    [96melm-review new-package[39m
        It will create a new project, containing:
        - An elm.json file
        - A src/ directory with an initial rule
        - A tests/ directory with an initial rule
        - A package.json with Elm tooling and scripts
        - A preconfigured review configuration, tailored for elm-review rules
        - A GitHub action to publish the package really easily

You can customize the new-package command with the following flags:

    [36m--compiler <path-to-elm>[39m
        Specify the path to the [95melm[39m compiler.
        The [95melm[39m compiler is used to know the version of the compiler to write
        down in the [93mreview/elm.json[39m fileâ€™s \`elm-version\` field. Use this if you
        have multiple versions of the [95melm[39m compiler on your device.

"
`;

exports[`new-rule --help 1`] = `
"The new-rule command adds an empty rule to your review configuration or
review package.

    [96melm-review new-rule [RULE-NAME][39m
        It will add a rule file in src/ and a corresponding test file in tests/.
        If this is for a review package, the command will add the rule to the
        list of \\"exposed-modules\\" in the elm.json file. It will also add to the
        README.md a description of the rule and add the rule to the example
        configuration.
        If this is for a project with a review/ folder, you need to run this command
        from inside review/.

        RULE-NAME should be formatted just like an Elm module name, such as
        NoDoingThis or No.Doing.This. Read more about good names at
        https://package.elm-lang.org/packages/jfmengels/elm-review/latest/Review-Rule#a-good-rule-name


"
`;

exports[`suppress --help 1`] = `
"The suppress command helps adding new rules that report many errors
in your project.

    [38;2;255;165;0melm-review suppress[39m
        Reviews your project and generates suppression files for the reported
        errors.

[92melm-review[39m has two systems to ignore reported errors.

First is the use of the [36mRule.ignoreErrorsForDirectories[39m and
[36mRule.ignoreErrorsForFiles[39m functions in the [36mReviewConfig.elm[39m file. These aim to
indicate the parts of the project where a rule would not provide value and
should be ignored, such as generated or vendored code.

The second system is the [38;2;255;165;0mtemporarily suppressed[39m errors system, which aims to
help you gradually adopt rules that report many errors in your project without
having you fix all the issues beforehand.

Running [38;2;255;165;0melm-review suppress[39m will generate a JSON file in [38;2;255;165;0mreview/suppressed/[39m for
every rule that currently reports errors, and records the number of suppressed
errors per file in your project.

While suppression files exist for your project, running [92melm-review[39m will behave
as usual but with these additional behaviors:
  - Suppressed errors won't be reported.
  - If there are outstanding errors for the ignored rules and files, the related
    suppressed errors will be reported until you reduce the number of errors
    back to the number in the JSON file. This is a good opportunity to fix more!
  - If no errors are being reported and there are less suppressed errors than
    before, suppression files will be updated automatically, in order to make
    sure no new errors get re-introduced unknowingly.

While you can run the [38;2;255;165;0msuppress[39m command to ignore newly reported errors, please
do so with moderation. The aim of the suppression system is to allow enabling
rules while there are errors remaining and to have these fixed incrementally,
not to make it easier to ignore errors.

When you wish to tackle the suppressed errors, you can run [92melm-review[39m (without
the [38;2;255;165;0msuppress[39m subcommand) with its available flags, and you can use the following
options to help you:

    [36m--unsuppress[39m
        Include [38;2;255;165;0msuppressed[39m errors in the error report for all rules.

    [36m--unsuppress-rules <rule1,rule2,...>[39m
        Include [38;2;255;165;0msuppressed[39m errors in the error report for the listed rules.
        Specify the rules by their name, and separate them by commas.

"
`;
