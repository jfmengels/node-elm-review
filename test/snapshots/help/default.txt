You are using elm-review <version>.

    elm-review <zero-or-more-files-or-directories>
        Analyzes your project, and lists the locations where patterns forbidden
        by your configuration appear. It can potentially also fix some of the
        errors for you when adding --fix.

        Unless files or directories are specified, elm-review will look at:
        - For packages: src/ and tests/
        - For applications: the project’s elm.json’s "source-directories" and
          tests/

    elm-review init
        Creates an empty review configuration. It creates a review/elm.json and
        a review/src/ReviewConfig.elm file, and provides links to help you get
        started. Learn more by running elm-review init --help.

    elm-review suppress
        Generate suppression files for rules that report many errors. Use this
        when you wish to enable a rule without requiring fixing all the issues
        beforehand. Learn more by running elm-review suppress --help.

    elm-review new-package
        Creates an new project aimed to contain rules and to be published later.

    elm-review new-rule [RULE-NAME]
        Adds a new rule to your review configuration or review package.

    elm-review prepare-offline
        Prepares running elm-review in offline mode using --offline.

You can customize the review command with the following flags:

    --unsuppress
        Include suppressed errors in the error report for all rules.

    --rules <rule1,rule2,...>
        Run with a subsection of the rules in the configuration.
        Specify them by their name, and separate them by commas.

    --watch
        Re-run elm-review automatically when your project or configuration
        changes. Use --watch-code to re-run only on project changes.
        You can use --watch and --fix together.

    --extract
        Enable extracting data from the project for the rules that have a
        data extractor. Requires running with --report=json.
        Learn more by reading the section about "Extracting information"
        at https://bit.ly/3UmNr0V

    --elmjson <path-to-elm.json>
        Specify the path to the elm.json file of the project. By default,
        the one in the current directory or its parent directories will be used.

    --config <path-to-review-directory>
        Use the review configuration in the specified directory instead of the
        one found in the current directory or one of its parents.

    --template <author>/<repo>[/path-to-the-config-folder][#branch-or-commit]
        Use the review configuration from a GitHub repository. You can use this
        to try out elm-review, a configuration or a single rule.
        This flag requires Internet access, even after the first run.
        Examples:
          - elm-review --template author/elm-review-configuration
          - elm-review --template jfmengels/elm-review-unused/example#master

        I recommend to only use this temporarily, and run elm-review init with
        this same flag to copy the configuration to your project.

    --compiler <path-to-elm>
        Specify the path to the elm compiler.

    --version
        Print the version of the elm-review CLI.

    --debug
        Add helpful pieces of information for debugging purposes.
        This will also run the compiler with --debug, allowing you to use
        Debug functions in your custom rules.

    --benchmark-info
        Print out how much time it took for rules and phases of the process to
        run. This is meant for benchmarking purposes.

    --no-color
        Disable colors in the output.

    --report=<json or ndjson>
        Error reports will be in JSON format. json prints a single JSON object
        while ndjson will print one JSON object per error each on a new line.
        The formats are described in this document: https://bit.ly/31F6jzz

    --no-details
        Hide the details from error reports for a more compact view.

    --offline
        Prevent making network calls. You might need to run
        elm-review prepare-offline beforehand to avoid problems.

    --ignore-dirs <dir1,dir2,...>
        Ignore the reports of all rules for the specified directories.

    --ignore-files <file1,file2,...>
        Ignore the reports of all rules for the specified files.

If you wish to use automatic fixing, you can use the following flags:

    --fix
        elm-review will present fixes for the errors that offer an automatic
        fix, which you can then accept or refuse one by one. When there are no
        more fixable errors left, elm-review will report the remaining errors as
        if it was called without --fix.
        Fixed files will be reformatted using elm-format.

    --fix-all
        elm-review will present a single fix containing the application of all
        available automatic fixes, which you can then accept or refuse.
        Afterwards, elm-review will report the remaining errors as if it was
        called without --fix-all.
        Fixed files will be reformatted using elm-format.

    --fix-limit=N
        Limit the number of fixes applied in a single batch to N.

    --elm-format-path <path-to-elm-format>
        Specify the path to elm-format.

