You are using [92melm-review <version>[39m.

    [96melm-review <zero-or-more-files-or-directories>[39m
        Analyzes your project, and lists the locations where patterns forbidden
        by your configuration appear. It can potentially also fix some of the
        errors for you when adding [94m--fix[39m.

        Unless files or directories are specified, [92melm-review[39m will look at:
        - For packages: src/ and tests/
        - For applications: the projectâ€™s elm.jsonâ€™s "source-directories" and
          tests/

    [93melm-review init[39m
        Creates an empty review configuration. It creates a [93mreview/elm.json[39m and
        a [36mreview/src/ReviewConfig.elm[39m file, and provides links to help you get
        started. Learn more by running [94melm-review init --help[39m.

    [93melm-review suppress[39m
        Generate suppression files for rules that report many errors. Use this
        when you wish to enable a rule without requiring fixing all the issues
        beforehand. Learn more by running [38;2;255;165;0melm-review suppress --help[39m.

    [93melm-review new-package[39m
        Creates an new project aimed to contain rules and to be published later.

    [93melm-review new-rule [RULE-NAME][39m
        Adds a new rule to your review configuration or review package.

You can customize the review command with the following flags:

    [36m--unsuppress[39m
        Include [38;2;255;165;0msuppressed[39m errors in the error report for all rules.

    [36m--rules <rule1,rule2,...>[39m
        Run with a subsection of the rules in the configuration.
        Specify them by their name, and separate them by commas.

    [36m--watch[39m
        Re-run [92melm-review[39m automatically when your project or configuration
        changes. Use [36m--watch-code[39m to re-run only on project changes.
        You can use [36m--watch[39m and [94m--fix[39m together.

    [36m--elmjson <path-to-elm.json>[39m
        Specify the path to the elm.json file of the project. By default,
        the one in the current directory or its parent directories will be used.

    [36m--config <path-to-review-directory>[39m
        Use the review configuration in the specified directory instead of the
        one found in the current directory or one of its parents.

    [36m--template <author>/<repo>[/path-to-the-config-folder][#branch-or-commit][39m
        Use the review configuration from a GitHub repository. You can use this
        to try out [92melm-review[39m, a configuration or a single rule.
        This flag requires Internet access, even after the first run.
        Examples:
          - elm-review --template author/elm-review-configuration
          - elm-review --template jfmengels/elm-review-unused/example#master

        I recommend to only use this temporarily, and run [93melm-review init[39m with
        this same flag to copy the configuration to your project.

    [36m--compiler <path-to-elm>[39m
        Specify the path to the [95melm[39m compiler.

    [36m--version[39m
        Print the version of the [92melm-review[39m CLI.

    [36m--debug[39m
        Add helpful information to debug your configuration or rules.
        - Print the list of reviewed files.
        - Run the compiler in debug mode, allowing you to use [33mDebug[39m statements
          in your configuration and custom rules.

    [36m--report=<json or ndjson>[39m
        Error reports will be in JSON format. [35mjson[39m prints a single JSON object
        while [35mndjson[39m will print one JSON object per error each on a new line.
        The formats are described in this document: https://bit.ly/31F6jzz

    [36m--no-details[39m
        Hide the details from error reports for a more compact view.

    [36m--ignore-dirs <dir1,dir2,...>[39m
        Ignore the reports of all rules for the specified directories.

    [36m--ignore-files <file1,file2,...>[39m
        Ignore the reports of all rules for the specified files.

If you wish to use [94mautomatic fixing[39m, you can use the following flags:

    [94m--fix[39m
        [92melm-review[39m will present fixes for the errors that offer an automatic
        fix, which you can then accept or refuse one by one. When there are no
        more fixable errors left, [92melm-review[39m will report the remaining errors as
        if it was called without [94m--fix[39m.
        Fixed files will be reformatted using [95melm-format[39m.

    [94m--fix-all[39m
        [92melm-review[39m will present a single fix containing the application of all
        available automatic fixes, which you can then accept or refuse.
        Afterwards, [92melm-review[39m will report the remaining errors as if it was
        called without [94m--fix-all[39m.
        Fixed files will be reformatted using [95melm-format[39m.

    [36m--elm-format-path <path-to-elm-format>[39m
        Specify the path to [95melm-format[39m.

